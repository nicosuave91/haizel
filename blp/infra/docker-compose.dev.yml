version: '3.9'

x-node-service: &node-service
  image: node:20
  working_dir: /workspace
  volumes:
    - ..:/workspace
  environment: &node-env
    NODE_ENV: development
    DATABASE_URL: postgresql://blp:blp@postgres:5432/blp
    REDIS_URL: redis://redis:6379/0
    KAFKA_BROKERS: redpanda:9092
    TEMPORAL_ADDRESS: temporal:7233
    TEMPORAL_NAMESPACE: default
    OPA_URL: http://opa:8181
    MINIO_ENDPOINT: http://minio:9000
    MINIO_ROOT_USER: blp
    MINIO_ROOT_PASSWORD: blpsecret
    CLAMAV_HOST: clamav
    CLAMAV_PORT: '3310'
    OTEL_COLLECTOR_ENDPOINT: http://otel-collector:4318

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: blp
      POSTGRES_PASSWORD: blp
      POSTGRES_DB: blp
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U blp']
      interval: 5s
      timeout: 5s
      retries: 10

  postgres-migrate:
    image: postgres:15
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_USER: blp
      POSTGRES_PASSWORD: blp
      POSTGRES_DB: blp
    volumes:
      - ../db/migrations:/migrations:ro
      - ../db/seed:/seed:ro
    command: >-
      bash -lc "
      set -euo pipefail;
      shopt -s nullglob;
      export PGPASSWORD=$${POSTGRES_PASSWORD};
      until pg_isready --host=postgres --username=$${POSTGRES_USER} --dbname=$${POSTGRES_DB}; do sleep 1; done;
      psql --set ON_ERROR_STOP=1 --host=postgres --username=$${POSTGRES_USER} --dbname=postgres <<'SQL'
      DO $$
      BEGIN
        IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'temporal') THEN
          CREATE ROLE temporal WITH LOGIN PASSWORD 'temporal';
        END IF;
      END$$;
      DO $$
      BEGIN
        IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'temporal') THEN
          CREATE DATABASE temporal OWNER temporal;
        END IF;
      END$$;
      DO $$
      BEGIN
        IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'temporal_visibility') THEN
          CREATE DATABASE temporal_visibility OWNER temporal;
        END IF;
      END$$;
      SQL
      for file in /migrations/*.sql; do
        echo "Running migration $$file";
        psql --set ON_ERROR_STOP=1 --host=postgres --username=$${POSTGRES_USER} --dbname=$${POSTGRES_DB} --file="$$file";
      done;
      for file in /seed/*.sql; do
        echo "Seeding $$file";
        psql --set ON_ERROR_STOP=1 --host=postgres --username=$${POSTGRES_USER} --dbname=$${POSTGRES_DB} --file="$$file";
      done;
      "
    restart: 'no'

  redis:
    image: redis:7
    ports:
      - '6379:6379'

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.10
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --memory
      - 1G
      - --overprovisioned
      - --node-id
      - '0'
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:19092
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda:9092,OUTSIDE://localhost:19092
    ports:
      - '9092:9092'
      - '19092:19092'
    volumes:
      - redpanda-data:/var/lib/redpanda/data

  temporal:
    image: temporalio/auto-setup:1.21.0
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - DBNAME=temporal
      - DBNAME_VISIBILITY=temporal_visibility
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgres
    depends_on:
      postgres:
        condition: service_healthy
      postgres-migrate:
        condition: service_completed_successfully
    ports:
      - '7233:7233'

  temporal-ui:
    image: temporalio/ui:2.20.0
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
    ports:
      - '8080:8080'
    depends_on:
      temporal:
        condition: service_started

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - '16686:16686'
      - '14250:14250'

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.100.0
    command: ['--config=/etc/otelcol/config.yaml']
    volumes:
      - ./otel-collector.dev.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - '4317:4317'
      - '4318:4318'
    depends_on:
      jaeger:
        condition: service_started

  opa:
    image: openpolicyagent/opa:0.59.0
    command: ['run', '--server', '--addr=0.0.0.0:8181', '/policy/policy-bundle-dev.tar.gz']
    ports:
      - '8181:8181'
    volumes:
      - ../apps/policy-bundle/dist:/policy

  minio:
    image: minio/minio:RELEASE.2023-09-07T02-05-02Z
    environment:
      MINIO_ROOT_USER: blp
      MINIO_ROOT_PASSWORD: blpsecret
    command: server /data --console-address :9001
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data

  clamav:
    image: clamav/clamav:stable
    ports:
      - '3310:3310'

  core-api:
    <<: *node-service
    command: >-
      bash -lc "corepack enable && pnpm --filter core-api exec ts-node --transpile-only src/main.ts"
    ports:
      - '3000:3000'
    environment:
      <<: *node-env
      AUTH0_AUDIENCE: https://core-api.test
      AUTH0_ISSUER: https://auth0.local/
      AUTH0_SECRET: local-dev-secret
      DOCUMENT_BUCKET: local-documents
    depends_on:
      postgres-migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started
      temporal:
        condition: service_started
      opa:
        condition: service_started
      minio:
        condition: service_started
      clamav:
        condition: service_started

  worker:
    <<: *node-service
    command: >-
      bash -lc "corepack enable && pnpm --filter worker exec ts-node --transpile-only src/index.ts"
    environment:
      <<: *node-env
      TEMPORAL_TASK_QUEUE: blp.default
    depends_on:
      temporal:
        condition: service_started
      postgres-migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started

  connectors-ppe:
    <<: *node-service
    command: >-
      bash -lc "corepack enable && pnpm --filter ppe-adapter dev"
    ports:
      - '3001:3001'
    environment:
      <<: *node-env
      PORT: '3001'
    depends_on:
      core-api:
        condition: service_started
      postgres-migrate:
        condition: service_completed_successfully

  connectors-credit:
    <<: *node-service
    command: >-
      bash -lc "corepack enable && pnpm --filter credit dev"
    ports:
      - '3002:3002'
    environment:
      <<: *node-env
      PORT: '3002'
    depends_on:
      core-api:
        condition: service_started
      postgres-migrate:
        condition: service_completed_successfully

  connectors-aus:
    <<: *node-service
    command: >-
      bash -lc "corepack enable && pnpm --filter aus-gateway dev"
    ports:
      - '3003:3003'
    environment:
      <<: *node-env
      PORT: '3003'
    depends_on:
      core-api:
        condition: service_started
      postgres-migrate:
        condition: service_completed_successfully

  connectors-esign:
    <<: *node-service
    command: >-
      bash -lc "corepack enable && pnpm --filter esign dev"
    ports:
      - '3004:3004'
    environment:
      <<: *node-env
      PORT: '3004'
    depends_on:
      core-api:
        condition: service_started
      postgres-migrate:
        condition: service_completed_successfully

  rules-engine:
    image: python:3.11-slim
    working_dir: /workspace
    volumes:
      - ..:/workspace
    environment:
      PYTHONPATH: /workspace/apps/rules-engine
      DEBUG: '1'
    command: >-
      bash -lc "pip install --no-cache-dir -r apps/rules-engine/requirements.txt && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    ports:
      - '8000:8000'
    depends_on:
      redis:
        condition: service_started
      postgres-migrate:
        condition: service_completed_successfully

volumes:
  postgres-data:
  redpanda-data:
  minio-data:
