openapi: 3.0.3
info:
  title: BLP Core API
  version: 0.1.0
servers:
  - url: https://api.dev.blp.local
security:
  - bearerAuth: []
paths:
  /health:
    get:
      tags: [Health]
      summary: Liveness/readiness probe
      description: Returns a simple payload that signals the API is ready to accept traffic.
      security: []
      responses:
        '200':
          description: API is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /auth/me:
    get:
      tags: [Auth]
      summary: Retrieve the authenticated subject profile
      responses:
        '200':
          description: Authenticated principal and tenant binding derived from the JWT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/public-key:
    get:
      tags: [Auth]
      summary: Retrieve signing metadata for JWT validation.
      security: []
      responses:
        '200':
          description: Algorithm metadata for downstream services.
          content:
            application/json:
              schema:
                type: object
                properties:
                  algorithm:
                    type: string
                    example: HS256
  /loans:
    get:
      tags: [Loans]
      summary: List loans for the tenant
      responses:
        '200':
          description: Loans available to the tenant
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Loans]
      summary: Create a loan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoanRequest'
      responses:
        '201':
          description: Loan created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /loans/{loanId}:
    parameters:
      - $ref: '#/components/parameters/loanId'
    get:
      tags: [Loans]
      summary: Retrieve a single loan
      responses:
        '200':
          description: Loan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /loans/{loanId}/documents:
    parameters:
      - $ref: '#/components/parameters/loanId'
    get:
      tags: [Documents]
      summary: List documents attached to a loan
      responses:
        '200':
          description: Documents for the loan
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags: [Documents]
      summary: Upload a document to a loan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadDocumentRequest'
      responses:
        '201':
          description: Document metadata stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /loans/{loanId}/pricing/lock:
    parameters:
      - $ref: '#/components/parameters/loanId'
    post:
      tags: [Pricing]
      summary: Create a pricing lock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLockRequest'
      responses:
        '201':
          description: Pricing lock created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricingLock'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /loans/{loanId}/rules/evaluate:
    parameters:
      - $ref: '#/components/parameters/loanId'
    post:
      tags: [Rules]
      summary: Evaluate rules for a loan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RulesEvaluationRequest'
      responses:
        '200':
          description: Rule engine result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesEvaluationResult'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /loans/{loanId}/aus/run:
    parameters:
      - $ref: '#/components/parameters/loanId'
    post:
      tags: [AUS]
      summary: Execute AUS for a loan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AusRunRequest'
      responses:
        '201':
          description: AUS result persisted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AusResult'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /loans/{loanId}/credit/pull:
    parameters:
      - $ref: '#/components/parameters/loanId'
    post:
      tags: [Credit]
      summary: Pull a credit report for a loan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditPullRequest'
      responses:
        '201':
          description: Credit report retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditReport'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Authentication is required or token validation failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missingToken:
              summary: Missing Bearer token
              value:
                statusCode: 401
                message: Missing Authorization header
                error: Unauthorized
    Forbidden:
      description: Tenant binding mismatch or insufficient permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missingPermission:
              summary: Missing permission
              value:
                statusCode: 403
                message: Missing permission for loan:list
                error: Forbidden
    NotFound:
      description: Requested resource was not found for the tenant scope.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ValidationError:
      description: Payload failed validation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
  parameters:
    loanId:
      name: loanId
      in: path
      required: true
      schema:
        type: string
  schemas:
    AuthUser:
      type: object
      properties:
        sub:
          type: string
        tenantId:
          type: string
        permissions:
          type: array
          items:
            type: string
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        error:
          type: string
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            message:
              type: array
              items:
                type: string
    Loan:
      type: object
      properties:
        id:
          type: string
        tenantId:
          type: string
        borrowerName:
          type: string
        amount:
          type: number
        status:
          type: string
          enum: [draft, submitted, locked]
        pricingLockId:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateLoanRequest:
      type: object
      required: [borrowerName, amount]
      properties:
        borrowerName:
          type: string
        amount:
          type: number
    Document:
      type: object
      properties:
        id:
          type: string
        tenantId:
          type: string
        loanId:
          type: string
        name:
          type: string
        contentType:
          type: string
        version:
          type: integer
        createdAt:
          type: string
          format: date-time
    UploadDocumentRequest:
      type: object
      required: [name, contentType, content]
      properties:
        name:
          type: string
        contentType:
          type: string
        content:
          type: string
          format: byte
    CreateLockRequest:
      type: object
      required: [rate, durationMinutes]
      properties:
        rate:
          type: number
        durationMinutes:
          type: integer
    PricingLock:
      type: object
      properties:
        id:
          type: string
        loanId:
          type: string
        tenantId:
          type: string
        rate:
          type: number
        expiresAt:
          type: string
          format: date-time
    RulesEvaluationRequest:
      type: object
      required: [trigger]
      properties:
        trigger:
          type: string
    RulesEvaluationResult:
      type: object
      properties:
        trigger:
          type: string
        findings:
          type: array
          items:
            type: string
        passed:
          type: boolean
    AusRunRequest:
      type: object
      required: [engine]
      properties:
        engine:
          type: string
    AusResult:
      type: object
      properties:
        id:
          type: string
        loanId:
          type: string
        tenantId:
          type: string
        engine:
          type: string
        decision:
          type: string
        createdAt:
          type: string
          format: date-time
    CreditPullRequest:
      type: object
      required: [bureau]
      properties:
        bureau:
          type: string
    CreditReport:
      type: object
      properties:
        id:
          type: string
        loanId:
          type: string
        tenantId:
          type: string
        bureau:
          type: string
        score:
          type: integer
        createdAt:
          type: string
          format: date-time
