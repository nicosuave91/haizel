name: Core API CI

on:
  push:
    paths:
      - 'apps/core-api/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'pnpm-workspace.yaml'
      - '.github/workflows/ci-core.yml'
  pull_request:
    paths:
      - 'apps/core-api/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'pnpm-workspace.yaml'
      - '.github/workflows/ci-core.yml'

concurrency:
  group: ci-core-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test-build:
    name: Lint, test & build
    runs-on: ubuntu-latest
    env:
      PNPM_HOME: ~/.pnpm
      PATH: ${{ env.PNPM_HOME }}:${{ env.PATH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile=false

      - name: Lint core API
        run: |
          pnpm --filter core-api... lint || pnpm run lint --filter core-api...

      - name: Test core API
        run: |
          pnpm --filter core-api... test -- --runInBand || pnpm run test --filter core-api...
        env:
          CI: 'true'

      - name: Build core API
        run: |
          pnpm --filter core-api... build || pnpm run build --filter core-api...

      - name: Generate API clients
        run: |
          if pnpm --filter core-api... run generate:clients; then
            echo "pnpm workspace client generation succeeded."
          elif pnpm run generate:clients; then
            echo "Fallback client generation succeeded."
          elif [ -f apps/core-api/scripts/generate-clients.sh ]; then
            bash apps/core-api/scripts/generate-clients.sh
          else
            echo "No explicit client generation command found; skipping.";
          fi

      - name: Upload build artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: core-api-dist
          path: |
            apps/core-api/dist
            apps/core-api/build
          if-no-files-found: warn

  security:
    name: Security scans
    runs-on: ubuntu-latest
    needs: lint-test-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install dependencies (audit context)
        run: pnpm install --frozen-lockfile=false

      - name: Dependency scan (pnpm audit)
        run: pnpm audit --prod || pnpm audit --dev || true

      - name: Semgrep SAST scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/ci
          generateSarif: true

      - name: Upload Semgrep results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.sarif
          if-no-files-found: warn

      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: '0'
          format: 'table'
          vuln-type: 'os,library'
          ignore-unfixed: true

  docker-images:
    name: Build container images
    runs-on: ubuntu-latest
    needs: lint-test-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-core-api-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-core-api-buildx-

      - name: Build core API image
        run: |
          if [ -f apps/core-api/Dockerfile ]; then
            docker build \
              --file apps/core-api/Dockerfile \
              --tag core-api:${GITHUB_SHA} \
              --build-arg COMMIT_SHA=${GITHUB_SHA} \
              apps/core-api
          else
            echo "Dockerfile not found for core API. Skipping Docker build.";
          fi

      - name: Build clients image
        run: |
          if [ -f apps/core-api/clients/Dockerfile ]; then
            docker build \
              --file apps/core-api/clients/Dockerfile \
              --tag core-api-clients:${GITHUB_SHA} \
              apps/core-api/clients
          else
            echo "Client Dockerfile not found; skipping.";
          fi

      - name: Export docker image metadata
        if: success() || failure()
        run: |
          mkdir -p docker-metadata
          docker image ls > docker-metadata/images.txt

      - name: Upload Docker metadata
        uses: actions/upload-artifact@v4
        with:
          name: docker-metadata
          path: docker-metadata/images.txt
          if-no-files-found: warn
